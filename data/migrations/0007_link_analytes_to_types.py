# Generated by Django X.Y on YYYY-MM-DD HH:MM
# -*- coding: utf-8 -*-
from django.db import migrations

# Определяем, какие аналиты к каким типам тестов относятся
# Используем основные русские имена для поиска в базе
ANALYTE_TYPE_MAPPING = {
    'Общий анализ крови': [
        'Гемоглобин', 'Гематокрит', 'Лейкоциты', 'Эритроциты', 'Тромбоциты',
        'Средний объем эритроцита', 'Среднее содержание гемоглобина в эритроците',
        'Средняя концентрация гемоглобина в эритроците', 'Ширина распределения эритроцитов по объему',
        'Ширина распределения эритроцитов (ст. откл.)', 'Средний объем тромбоцитов',
        'Ширина распределения тромбоцитов по объему', 'Коэффициент больших тромбоцитов', 'Тромбокрит',
        'Нейтрофилы %', 'Лимфоциты %', 'Моноциты %', 'Эозинофилы %', 'Базофилы %',
        'Нейтрофилы абс.', 'Лимфоциты абс.', 'Моноциты абс.', 'Эозинофилы абс.', 'Базофилы абс.',
        'Скорость оседания эритроцитов', 'Цветной показатель', 'Ретикулоциты', 'Ретикулоциты абс.'
    ],
    'Биохимический анализ крови': [
        'Креатинин', 'Мочевина', 'Азот мочевины крови', 'Мочевая кислота', 'Цистатин C',
        'Аланинаминотрансфераза', 'Аспартатаминотрансфераза', 'Щелочная фосфатаза',
        'Гамма-глутамилтрансфераза', 'Билирубин общий', 'Билирубин прямой', 'Билирубин непрямой',
        'Альбумин', 'Общий белок', 'Лактатдегидрогеназа', 'Холинэстераза', 'Аммиак',
        'Натрий', 'Калий', 'Хлор', 'Бикарбонат', 'Общий CO2', 'Кальций общий', 'Кальций ионизированный',
        'Магний', 'Фосфор неорганический', 'Глюкоза', 'Лактат', 'Фруктозамин',
        'Креатинкиназа общая', 'Креатинкиназа-МВ', # Добавили КФК-МВ сюда тоже
        'Железо сывороточное', 'Общая железосвязывающая способность сыворотки', 'Трансферрин',
        'Насыщение трансферрина железом', 'Ферритин', 'Амилаза', 'Амилаза панкреатическая', 'Липаза',
        'Гомоцистеин', 'Церулоплазмин', 'Медь', 'Цинк', 'Гастрин', 'Пепсиноген I', 'Пепсиноген II',
        'Остеокальцин', 'Beta-CrossLaps', 'P1NP', 'Витамин B12', 'Фолиевая кислота', 'Витамин D (25-OH)' # Добавили витамины
    ],
    'Коагулограмма': [
        'Протромбиновое время', 'Протромбин по Квику', 'Международное нормализованное отношение',
        'Активированное частичное тромбопластиновое время', 'D-димер', 'Фибриноген',
        'Тромбиновое время', 'Антитромбин III', 'Протеин C', 'Протеин S', 'Волчаночный антикоагулянт'
    ],
    'Общий анализ мочи': [
        'Цвет мочи', 'Прозрачность мочи', 'pH мочи', 'Удельный вес мочи', 'Белок в моче',
        'Глюкоза в моче', 'Кетоны в моче', 'Кровь в моче', 'Билирубин в моче', 'Уробилиноген в моче',
        'Нитриты в моче', 'Лейкоциты в моче (эстераза)', 'Эритроциты в моче (микроскопия)',
        'Лейкоциты в моче (микроскопия)', 'Эпителий плоский', 'Эпителий переходный', 'Эпителий почечный',
        'Цилиндры гиалиновые', 'Цилиндры зернистые', 'Цилиндры восковидные', 'Цилиндры эритроцитарные',
        'Цилиндры лейкоцитарные', 'Кристаллы в моче', 'Бактерии в моче', 'Слизь в моче',
        'Соотношение Белок/Креатинин в моче', 'Суточный белок в моче',
        'Анализ мочи по Нечипоренко (Лейкоциты)', 'Анализ мочи по Нечипоренко (Эритроциты)',
        'Анализ мочи по Нечипоренко (Цилиндры)'
    ],
    'Гормоны щитовидной железы': [
        'Тиреотропный гормон', 'Тироксин свободный', 'Трийодтиронин свободный',
        'Тироксин общий', 'Трийодтиронин общий', 'Антитела к тиреопероксидазе',
        'Антитела к тиреоглобулину', 'Антитела к рецепторам ТТГ', 'Тиреоглобулин', 'Кальцитонин'
    ],
    'Липидный профиль': [
        'Холестерин общий', 'Холестерин ЛПНП', 'Холестерин ЛПВП', 'Триглицериды',
        'Коэффициент атерогенности', 'Лпопротеин (а)', 'Аполипопротеин А1', 'Аполипопротеин B'
    ],
    'Иммунологический анализ': [
        'С-реактивный белок', 'Ревматоидный фактор', 'Антистрептолизин-О', 'Антинуклеарный фактор',
        'Антитела к дсДНК', 'Антитела к циклическому цитруллинированному пептиду',
        'Компонент комплемента C3', 'Компонент комплемента C4', 'Антинейтрофильные цитоплазматические антитела',
        'Иммуноглобулин A', 'Иммуноглобулин M', 'Иммуноглобулин G', 'Иммуноглобулин E', 'Криоглобулины',
        'Антитела к кардиолипину IgG', 'Антитела к кардиолипину IgM',
        'Антитела к бета-2-гликопротеину I IgG', 'Антитела к бета-2-гликопротеину I IgM'
    ],
    'Инфекционная серология': [
        'HBsAg', 'Anti-HBc Total', 'Anti-HBc IgM', 'Anti-HBs', 'HBeAg', 'Anti-HBe',
        'Anti-HCV Total', 'ВИЧ (антитела и антиген)', 'Сифилис RPR', 'Сифилис TPHA', 'Сифилис IgM/IgG',
        'COVID-19 (ПЦР)', 'COVID-19 (Антиген)', 'COVID-19 Антитела IgG', 'COVID-19 Антитела IgM',
        'Грипп A/B', 'Вирус Эпштейна-Барр VCA IgG', 'Вирус Эпштейна-Барр VCA IgM',
        'Вирус Эпштейна-Барр EA IgG', 'Вирус Эпштейна-Барр EBNA IgG', 'Цитомегаловирус IgG',
        'Цитомегаловирус IgM', 'Вирус простого герпеса 1/2 IgG', 'Вирус простого герпеса 1/2 IgM',
        'Токсоплазма IgG', 'Токсоплазма IgM', 'Краснуха IgG', 'Краснуха IgM',
        'Квантифероновый тест', 'Проба Манту', 'Диаскинтест', 'Хламидия трахоматис IgG',
        'Хламидия трахоматис IgA', 'Хламидия трахоматис IgM', 'Микоплазма пневмонии IgG',
        'Микоплазма пневмонии IgM', 'Helicobacter pylori IgG', 'Helicobacter pylori IgA',
        'Helicobacter pylori IgM', 'Антитела к лямблиям суммарные', 'Антитела к аскаридам IgG',
        'Антитела к токсокарам IgG', 'Антитела к эхинококку IgG', 'Антитела к описторхам IgG'
    ],
    'Онкомаркеры': [
        'Простат-специфический антиген общий', 'Простат-специфический антиген свободный',
        'Раково-эмбриональный антиген', 'Углеводный антиген 19-9', 'Раковый антиген 125',
        'Раковый антиген 15-3', 'Альфа-фетопротеин', 'Хорионический гонадотропин человека',
        'Нейронспецифическая енолаза', 'Раковый антиген 72-4', 'Раковый антиген 242',
        'Белок S-100', 'Хромогранин A', 'Антиген плоскоклеточной карциномы', 'Cyfra 21-1', 'HE4',
        'Кальцитонин' # Кальцитонин может быть и здесь
    ],
    'Токсикология / Лекарственный мониторинг': [ # Создайте этот TestType, если его нет
        'Алкоголь в крови', 'Парацетамол', 'Салицилаты', 'Фенитоин', 'Дигоксин', 'Литий',
        'Вальпроевая кислота', 'Карбамазепин', 'Ванкомицин', 'Гентамицин', 'Фенобарбитал',
        'Теофиллин', 'Ламотриджин', 'Леветирацетам'
    ],
    # Добавьте другие типы и их аналиты
}

def link_analytes(apps, schema_editor):
    """
    Устанавливает связи ManyToMany между Analyte и TestType.
    """
    Analyte = apps.get_model('data', 'Analyte')
    TestType = apps.get_model('data', 'TestType')
    db_alias = schema_editor.connection.alias

    print("\nLinking analytes to test types...")
    linked_count = 0
    skipped_analytes = 0
    skipped_types = 0

    for test_type_name, analyte_names in ANALYTE_TYPE_MAPPING.items():
        try:
            test_type = TestType.objects.using(db_alias).get(name=test_type_name)
            print(f"Processing TestType: {test_type.name}")
            analytes_found = Analyte.objects.using(db_alias).filter(name__in=analyte_names)
            analytes_map = {a.name: a for a in analytes_found}

            for analyte_name in analyte_names:
                analyte = analytes_map.get(analyte_name)
                if analyte:
                    # Используем .add() - он сам обработает существующие связи
                    analyte.typical_test_types.add(test_type)
                    linked_count += 1
                else:
                    print(f"  WARNING: Analyte '{analyte_name}' not found for linking to '{test_type.name}'.")
                    skipped_analytes += 1
        except TestType.DoesNotExist:
            print(f"WARNING: TestType '{test_type_name}' not found, skipping all links for it.")
            skipped_types += 1
            skipped_analytes += len(analyte_names)

    # Django < 4.1 doesn't support bulk add for M2M through historical models easily
    # The .add() method above handles it individually.

    print(f"Analyte linking complete. Links processed: {linked_count}, Skipped analytes: {skipped_analytes}, Skipped types: {skipped_types}")


def reverse_link_analytes(apps, schema_editor):
    """
    Откат: удаляет связи, установленные этой миграцией (опционально).
    """
    pass # Оставляем пустым, чтобы не удалять данные при откате

class Migration(migrations.Migration):

    dependencies = [
        # Замените '0005_...' на имя миграции, созданной на Шаге 2 (добавление поля M2M)
        ('data', '0006_analyte_typical_test_types_testtype_keywords_and_more'), # <-- УКАЖИТЕ ПРАВИЛЬНОЕ ИМЯ!
    ]

    operations = [
        migrations.RunPython(link_analytes, reverse_code=reverse_link_analytes),
    ]
